#include "PointMap.hpp"


PointMap::PointMap()
{
    x_num_cells = 100;
    y_num_cells = 100;
    x_size = 100;
    y_size = 100;
    x_cell_size = x_size / x_num_cells;
    y_cell_size = y_size / y_num_cells;
    update_counter = 0;
}
/*!
Returns the size of the x and y dimensions of the map
@return A pair representing the size of the map <X,Y>
*/ 
std::pair<double, double> PointMap::GetSize()
{
    return std::pair<double, double>(x_size, y_size);
}
/*!
Returns the size of each x/y cell in the map
@return A pair representing the cell interval/size <X,Y>
*/ 
std::pair<int, int> PointMap::GetNumCells()
{
    return std::pair<double, double>(x_num_cells, y_num_cells);
}

/*!
Returns the physical size of the cell of the map.
@return a std::pair representing <x,y> cell size of the map.
*/
std::pair<double, double> PointMap::GetCellSize()
{
    return std::pair<double, double>(x_cell_size, y_cell_size);
}

/*!
Sets the number of cells in the 2D Grid.
@param x_cells Number of horizontal cells. This value must be non-zero.
@param y_cells Number of vertical cells. This value must be non-zero.
*/
void PointMap::SetNumCells(const size_t& x_cells, const size_t& y_cells)
{
    if(x_cells <= 0 || y_cells <= 0)
        return;

    x_num_cells = x_cells;
    y_num_cells = y_cells;
}

/*!
Adds a set of LIDAR points to the map. The function will return an ID
cooresponding to this set of points. The calling function shall call RemoveUpdate
before destroying these points as the map does not create a copy.
@see RemoveUpdate
@param points A vector of points to be added.
@return a "unique" identifier generated by a rolling counter which coorespondes to this 
update.
*/
int PointMap::AddLIDARPoints(const std::vector<Point>& points)
{
    update_counter++;

    int x_index, y_index;
    float x_min = -50;
    float y_min = -50;
    std::map< std::pair< int, int>, std::vector<Point> > map_update;
    
    for(auto point : points)
    {
        int x, y;
        x = (point.x - x_min) / x_cell_size;
        y = (point.y - y_min) / y_cell_size;
        if( x < 0 || x >= x_num_cells || 
            y < 0 || y >= y_num_cells ||
            point.z > 1.5)
            continue;

        map_update[std::pair< int, int>(x,y)].push_back(point);
    }

    for( auto it : map_update )
    {
        cell_map[it.first].AddUpdate(update_counter, it.second);
    }

    return update_counter;
}

/*!
Removes an update (i.e. a set of points previously provided) from the map.
@see AddLIDARPoints
@param ID The identifier cooresponding to the returned ID when the points were pushed to the map
*/
void PointMap::RemoveUpdate(int ID)
{
    for( auto cell : cell_map )
    {
        cell.second.RemoveUpdate(ID);
    }
}

/*!
Clears the entire point map of points.
*/
void PointMap::ClearMap()
{
    cell_map.clear();
}