#!/usr/bin/env python

import math

import rospy
from radar.msg import radar_detections as DetectionsMsg
from radar.msg import radar_detection as DetectionMsg

from visualization_msgs.msg import Marker
from geometry_msgs.msg import Quaternion, Pose, Point, Vector3
from std_msgs.msg import Header, ColorRGBA

subscribers = []
publishers = []
RADAR_NAMES = ["Front_Left"]#, "Front_Center",
				#"Front_Right", "Rear_Left",
				#"Rear_Center", "Rear_Right"]
FRAME_IDS = ["base_footprint"]
markers = []

def radar_detections_cb(data):
	id = data.radar_id
	point_list = []
	color_list = []
	
	#for i in range(0, data.num_detections):
	x = 2
	y = 2
	z = 2
	point_list.append(Point(x,y,z))
	color_list.append(ColorRGBA(1.0, 1.0, 1.0, 0.5))
	#end for loop

	markers[id].points = point_list
	markers[id].colors = color_list
	markers[id].header.stamp = rospy.get_rostime()

	publishers[id].publish(markers[id])



def init():
	rospy.init_node('radar_transform')

	for i in range(len(RADAR_NAMES)):
		#ros stuff
		publishers.append(rospy.Publisher("visualization_marker", Marker, queue_size=1))
		subscribers.append(rospy.Subscriber("RADAR_raw/" + RADAR_NAMES[i], DetectionsMsg, radar_detections_cb))
		markers.append(Marker(
				action=Marker.ADD,
				type=Marker.POINTS,
				id=0,
				lifetime=rospy.Duration(1),
				scale=Vector3(0.06, 0.06, 0.06),
				header=Header(frame_id=FRAME_IDS[i]))
	)

	rospy.spin()

if __name__ == '__main__':
	try:
		init()
	except rospy.ROSInterruptException:
		pass
		
